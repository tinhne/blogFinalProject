// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String    @id @default(cuid())
  email       String    @unique
  password    String
  firstName   String
  lastName    String
  avatarUrl   String?
  dateOfBirth DateTime? @db.Date
  gender      Gender    @default(UNSPECIFIED)
  address     String?
  isVerified  Boolean   @default(false)
  isAdmin     Boolean   @default(false)

  resetToken          String?   @unique
  resetTokenExpiresAt DateTime? // Expiration time for the reset token

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  posts         Post[]
  comments      Comment[]
  verifications EmailVerification[]
  refreshTokens RefreshToken[]
}

enum Gender {
  MALE
  FEMALE
  UNSPECIFIED
}

model RefreshToken {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  userAgent String?
  ipAddress String?
  // expiresAt  DateTime // Thêm thời gian hết hạn
  revoked   Boolean  @default(false) // Đánh dấu token đã bị thu hồi chưa
  createdAt DateTime @default(now())

  // Quan hệ với User
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, token]) // Một user có thể có nhiều token khác nhau
}

// Email verification model
model EmailVerification {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Category model
model Category {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  posts PostCategory[]
}

// Post model - handles blog posts
model Post {
  id         String         @id @default(cuid())
  title      String
  content    String         @db.Text
  status     PostStatus     @default(DRAFT)
  visibility PostVisibility @default(PRIVATE)
  authorId   String
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt

  // Relations
  author     User           @relation(fields: [authorId], references: [id], onDelete: Cascade)
  comments   Comment[]
  categories PostCategory[]
  images     PostImage[]

  // Full-text search index
  @@index([title, content])
}

enum PostStatus {
  DRAFT
  PUBLISHED
}

enum PostVisibility {
  PUBLIC
  PRIVATE
}

// Junction table for Post and Category (many-to-many)
model PostCategory {
  postId     String
  categoryId String
  assignedAt DateTime @default(now())

  // Relations
  post     Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  category Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@id([postId, categoryId])
}

// Post images model
model PostImage {
  id        String   @id @default(cuid())
  postId    String
  url       String
  createdAt DateTime @default(now())

  // Relations
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
}

// Comment model
model Comment {
  id        String   @id @default(cuid())
  content   String   @db.Text
  postId    String
  authorId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  post   Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  author User @relation(fields: [authorId], references: [id], onDelete: Cascade)
}
